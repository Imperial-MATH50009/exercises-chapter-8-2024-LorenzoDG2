#!/usr/bin/env python
"""Create a report of when students submitted a test."""
import pandas as pd
import os
import time
from datetime import datetime


def read_data(filename):
    """Read in CSV files from the data folder."""
    return pd.read_csv(os.path.join(
        os.path.dirname(__file__), "..", "data", filename))


class_list = read_data("students.csv")
submissions = read_data("submissions.csv")
git_names = read_data("gitnames.csv")

# Create a mapping from Imperial usernames to GitHub names.
name_map = {imperial.lower(): git
            for imperial, git in zip(git_names["ImperialID"],
                                     git_names["GitHubID"])}

# Map GitHub names to submission times.
submissions_map = {
    git: time for git, time in zip(submissions["User"],
                                   submissions["SubmissionTime"])
}

# For each student in the class, find their submission time.
submission_times = [submissions_map.get(name_map.get(id.lower()))
                    for id in class_list["Username"]]

parsed_times = []
for t in submission_times:
    if isinstance(t, str) and t:
        clean_time = t.split('+')[0]  # remove timezone
        parsed_times.append(datetime.strptime(clean_time, '%H:%M:%S'))
    else:
        parsed_times.append(None)

# Define cutoff time
cutoff_time = datetime.strptime('14:40:00', '%H:%M:%S')

# Determine late submissions
late = [(t is not None and t > cutoff_time) for t in parsed_times]

report = pd.DataFrame({
    "FirstName": class_list["FirstName"],
    "SurName": class_list["Surname"],
    "UserName": class_list["Username"],
    "SubmissionTime": submission_times,
    "Late": late
})

print("Report complete.")
